Summary
=======
Ultra portable Deep Learning framework in Numpy. This implementation takes a lot of inspiration from Keras. This is mostly an attempt at understanding how to create a standalone farmework with well documented code. 

Sample network/ How to use
-----------------------------

.. code:: python

  import simflow as sf
  Data,Labels = sf.data_loader_mnist.load_normalized_mnist_data_flat()

  inp_dim = 784
  num_classes = 10

  #create network
  net = sf.Model()
  net.add_layer(sf.layers.Dense(inp_dim,200))
  net.add_layer(sf.layers.ReLU())
  net.add_layer(sf.layers.BN_mean(200))
  net.add_layer(sf.layers.Dense(200,num_classes))

  #add loss function
  net.set_loss_fn(sf.losses.SoftmaxCrossEntropyLoss())

  # add optimizer
  net.set_optimizer(sf.optimizers.SGD(lr=0.01,momentum=0.9,nestrov=True))

  # add iterator
  net.set_iterator(sf.iterators.minibatch_iterator())

  # fit the training data for 5 epochs
  net.fit(Data['train'],Labels['train'],epochs=5)

  # pring scores after training
  print("Final Accuracies after training :")
  print("Train Accuracy: ",net.score(Data['train'],Labels['train'])[1],end=" ")
  print("validation Accuracy: ",net.score(Data['val'],Labels['val'])[1],end =' ')
  print("Test Accuracy: ",net.score(Data['test'],Labels['test'])[1])
 
 
Dependencies
----------------------------

- Numpy
- Os
- Pytest (optional for testing)
- Wget (for data loader module)


Installation Steps
----------------------------

.. code:: python

  pip install -r requirements.txt



Testing Support
-----------------------

.. code:: python

  python -m pytest -v




